import axios from 'axios';

const API_V1_BASE_URL = import.meta.env.VITE_API_BASE_URL || '/api/v1';

const getAuthToken = () => {
  return localStorage.getItem('adminToken');
};

// Instance for calls to /api/v1 (like GET /api/v1/categories and POST /api/v1/categories/admin)
// Note: POST /api/v1/categories/admin is an admin-authenticated endpoint.
const createApiV1AuthorizedInstance = () => {
  const token = getAuthToken();
  return axios.create({
    baseURL: API_V1_BASE_URL, // Uses /api/v1
    headers: {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json',
    },
  });
};

/**
 * Fetches a list of all categories.
 * GIN Route: GET /api/v1/categories (public, paginated)
 * @param {object} params - Query parameters for pagination (e.g., { page: 1, page_size: 10 })
 * @returns {Promise<object>} A promise that resolves to an object containing 'data' (array of categories)
 *                            and 'pagination' info.
 */
export const getCategories = async (params) => {
  // This is a public endpoint, but sending Auth token anyway if admin is logged in,
  // in case backend provides slightly different/more data for authenticated users,
  // or if some public endpoints still benefit from knowing the user.
  // For admin panel context, sending token for all calls originating from it is usually fine.
  const apiClient = createApiV1AuthorizedInstance();
  try {
    const response = await apiClient.get('/categories', { params });
    // API response structure: { data: [categories], pagination: {} }
    return response.data;
  } catch (error) {
    console.error('Error fetching categories:', error.response?.data || error.message);
    throw error.response?.data || error.message;
  }
};

/**
 * Creates a new category (Admin action).
 * GIN Route: POST /api/v1/categories/admin
 * @param {object} categoryData - The data for the new category.
 *                                Expected: { name: string, description?: string }
 *                                (Slug is likely auto-generated by backend as per API doc for POST /api/v1/categories)
 * @returns {Promise<object>} A promise that resolves to the newly created category object.
 */
export const createCategory = async (categoryData) => {
  const apiClient = createApiV1AuthorizedInstance();
  try {
    // Path construction: /categories/admin
    const response = await apiClient.post('/categories/admin', categoryData);
    return response.data;
  } catch (error) {
    console.error('Error creating category:', error.response?.data || error.message);
    throw error.response?.data || error.message;
  }
};

// Admin Update: PUT /api/v1/categories/admin/:id
// Admin Delete: DELETE /api/v1/categories/admin/:id
// These were not in the original MVP plan for category but are in GIN. Adding placeholders.

/**
 * Updates an existing category (Admin action).
 * GIN Route: PUT /api/v1/categories/admin/:id
 * @param {string} categoryId - The ID of the category to update.
 * @param {object} categoryData - The data to update.
 * @returns {Promise<object>}
 */
export const updateCategoryAdmin = async (categoryId, categoryData) => {
  const apiClient = createApiV1AuthorizedInstance();
  try {
    const response = await apiClient.put(`/categories/admin/${categoryId}`, categoryData);
    return response.data;
  } catch (error) {
    console.error(`Error updating category ${categoryId}:`, error.response?.data || error.message);
    throw error.response?.data || error.message;
  }
};

/**
 * Deletes a category (Admin action).
 * GIN Route: DELETE /api/v1/categories/admin/:id
 * @param {string} categoryId - The ID of the category to delete.
 * @returns {Promise<object>}
 */
export const deleteCategoryAdmin = async (categoryId) => {
  const apiClient = createApiV1AuthorizedInstance();
  try {
    const response = await apiClient.delete(`/categories/admin/${categoryId}`);
    return response.data; // Or handle 204 No Content
  } catch (error) {
    console.error(`Error deleting category ${categoryId}:`, error.response?.data || error.message);
    throw error.response?.data || error.message;
  }
};


const categoryService = {
  getCategories,
  createCategory,
  updateCategoryAdmin, // Added
  deleteCategoryAdmin, // Added
};

export default categoryService;

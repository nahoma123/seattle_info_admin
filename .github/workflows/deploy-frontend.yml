name: Build and Deploy Frontend to EC2 via GHCR

on:
  push:
    branches:
      - main

env:
  FRONTEND_IMAGE_NAME: ghcr.io/nahoma123/seattle_info_admin

jobs:
  build-and-push-frontend-image:
    name: Build Frontend Docker image and push to GHCR
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependencies and build
        run: |
          npm install
          npm run build
        env:
          VITE_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          VITE_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          VITE_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          VITE_FIREBASE_MEASUREMENT_ID: ${{ secrets.FIREBASE_MEASUREMENT_ID }}
          VITE_API_BASE_URL: ${{ secrets.API_BASE_URL }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-frontend-to-ec2:
    name: Deploy Frontend to EC2 instance
    runs-on: ubuntu-latest
    needs: build-and-push-frontend-image
    environment: SERVER_HOST

    env:
      SERVER_HOST: ${{ secrets.SERVER_HOST }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
      GITHUB_LOGIN_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      FRONTEND_IMAGE_NAME: ghcr.io/nahoma123/seattle_info_admin

    steps:
      - name: Deploy Frontend to Server via SSH
        run: |
          cat << SCRIPT_TO_RUN_ON_SERVER > ./remote_frontend_script.sh
          set -e
          echo "--- Frontend Script starting on remote server ---"
          
          echo "Logging into GitHub Container Registry..."
          echo '${GITHUB_LOGIN_TOKEN}' | sudo docker login ghcr.io -u '${{ github.actor }}' --password-stdin
          
          echo "Pulling latest frontend image..."
          sudo docker pull ${{ env.FRONTEND_IMAGE_NAME }}:latest
          
          echo "Stopping and removing old frontend container (if exists)..."
          sudo docker stop seattle_info_admin_frontend || true
          sudo docker rm seattle_info_admin_frontend || true
          
          echo "Running new frontend container..."
          sudo docker run -d --name seattle_info_admin_frontend -p 80:80 ${{ env.FRONTEND_IMAGE_NAME }}:latest
          
          echo "Pruning old Docker images..."
          sudo docker image prune -af
          
          echo "--- Frontend Deployment successful! ---"
          SCRIPT_TO_RUN_ON_SERVER

          echo "Preparing to connect to server..."
          mkdir -p ~/.ssh
          echo "${SSH_PRIVATE_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "${SERVER_HOST}" >> ~/.ssh/known_hosts
          
          echo "Executing script on remote server..."
          ssh -i ~/.ssh/id_rsa ${SERVER_USER}@${SERVER_HOST} 'bash -s' < ./remote_frontend_script.sh